using Newtonsoft.Json;
using System;

namespace PRAW
{
    public class DiscordMessage
    {
        ///<summary>
        ///id of the channel the message was sent in
        ///</summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }

        ///<summary>
        ///id of the guild the message was sent in
        ///</summary>
        [JsonProperty("guild_id")]
        public ulong GuildID { get; internal set; }

        ///<summary>
        ///the author of this message (not guaranteed to be a valid user
        ///</summary>
        [JsonProperty("author")]
        public User Author { get; internal set; }

        ///<summary>
        ///member properties for this message's author
        ///</summary>
        [JsonProperty("member")]
        public GuildMember Member { get; internal set; }

        ///<summary>
        ///contents of the message
        ///</summary>
        [JsonProperty("content")]
        public string Content { get; internal set; }

        ///<summary>
        ///when this message was sent
        ///</summary>
        [JsonProperty("timestamp")]
        public DateTime TimeStamp { get; internal set; }

        ///<summary>
        ///when this message was edited (or null if never)
        ///</summary>
        [JsonProperty("edited_timestamp")]
        public DateTime? EditedTimeStamp { get; internal set; }

        ///<summary>
        ///whether this was a TTS message
        ///</summary>
        [JsonProperty("tts")]
        public bool IsTTS { get; internal set; }

        ///<summary>
        ///whether this message mentions everyone
        ///</summary>
        [JsonProperty("mention_everyone")]
        public bool MentionEveryone { get; internal set; }

        ///<summary>
        /// with an additional partial member field
        ///</summary>
        //[JsonProperty("mentions")]
        //public User[]? Mentions { get; internal set; }

        ///<summary>
        ///roles specifically mentioned in this message
        ///</summary>
        [JsonProperty("mention_roles")]
        public ulong[]? MentionedRoles { get; internal set; }

        ///<summary>
        ///channels specifically mentioned in this message
        ///</summary>
        [JsonProperty("mention_channels")]
        public ChannelMention[] MentionedChannels { get; internal set; }

        ///<summary>
        ///any attached files
        ///</summary>
        [JsonProperty("attachments")]
        public DiscordAttachment[] Attachments { get; internal set; }

        ///<summary>
        ///any embedded content
        ///</summary>
        [JsonProperty("embeds")]
        public DiscordEmbed[]? Embeds { get; internal set; }

        ///<summary>
        ///reactions to the message
        ///</summary>
        [JsonProperty("reactions")]
        public MessageReaction[]? Reactions { get; internal set; }

        ///<summary>
        ///used for validating a message was sent
        ///</summary>
        [JsonProperty("nonce")]
        public string Nonce { get; internal set; }

        ///<summary>
        ///whether this message is pinned
        ///</summary>
        [JsonProperty("pinned")]
        public bool IsPinned { get; internal set; }

        ///<summary>
        ///if the message is generated by a webhook
        ///</summary>
        [JsonProperty("webhook_id")]
        public ulong WebhookID { get; internal set; }

        ///<summary>
        ///type of message
        ///</summary>
        [JsonProperty("type")]
        public int Type { get; internal set; }

        ///<summary>
        ///sent with Rich Presence-related chat embeds
        ///</summary>
        [JsonProperty("activity")]
        public MessageActivity Activity { get; internal set; }

        ///<summary>
        ///sent with Rich Presence-related chat embeds
        ///</summary>
        [JsonProperty("application")]
        public DiscordApplication Application { get; internal set; }

        ///<summary>
        ///if the message is a response to an Interaction
        ///</summary>
        [JsonProperty("application_id")]
        public ulong ApplicationID { get; internal set; }

        ///<summary>
        ///data showing the source of a crosspost
        ///</summary>
        [JsonProperty("message_reference")]
        public MessageReference ReferenceMessage { get; internal set; }

        ///<summary>
        ///the stickers sent with the message (bots currently can only receive messages with stickers)
        ///</summary>
        [JsonProperty("stickers")]
        public DiscordSticker[] Stickers { get; internal set; }

        ///<summary>
        ///the message associated with the message_reference 
        ///</summary>
        [JsonProperty("referenced_message")]
        public MessageReference ReferencedMessage { get; internal set; }

        ///<summary>
        ///sent if the message is a response to an Interaction
        ///</summary>
        [JsonProperty("interaction")]
        public DiscordInteractions MessageInteraction { get; internal set; }

        ///<summary>
        ///the thread that was started from this message
        ///</summary>
        [JsonProperty("thread")]
        public DiscordChannel Thread { get; internal set; }

        ///<summary>
        ///sent if the message contains components like buttons
        ///</summary>
        [JsonProperty("components")]
        public MessageComponents[]? Components { get; internal set; }

        ///<summary>
        ///message flags combined as a bitfield
        ///</summary>
        [JsonProperty("flags")]
        public int Flags { get; internal set; }

        public enum MessageType
        {
            DEFAULT = 0,
            RECIPIENT_ADD = 1,
            RECIPIENT_REMOVE = 2,
            CALL = 3,
            CHANNEL_NAME_CHANGE = 4,
            CHANNEL_ICON_CHANGE = 5,
            CHANNEL_PINNED_MESSAGE = 6,
            GUILD_MEMBER_JOIN = 7,
            USER_PREMIUM_GUILD_SUBSCRIPTION = 8,
            USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1 = 9,
            USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2 = 10,
            USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3 = 11,
            CHANNEL_FOLLOW_ADD = 12,
            GUILD_DISCOVERY_DISQUALIFIED = 14,
            GUILD_DISCOVERY_REQUALIFIED = 15,
            GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING = 16,
            GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING = 17,
            THREAD_CREATED = 18,
            REPLY = 19,
            APPLICATION_COMMAND = 20,
            THREAD_STARTER_MESSAGE = 21,
            GUILD_INVITE_REMINDER = 22
        }

        public class MessageComponents
        {
            ///<summary>
            ///component type
            ///</summary>
            //[JsonProperty("type")]
            //public ComponentType Type { get; internal set; }

            ///<summary>
            ///one of button styles
            ///</summary>
            //[JsonProperty("style")]
            //public ButtonStyles Style { get; internal set; }

            ///<summary>
            ///text that appears on the button
            ///</summary>
            [JsonProperty("label")]
            public string Label { get; internal set; }

            ///<summary>
            ///name
            ///</summary>
            //[JsonProperty("emoji")]
            //public DiscordEmoji Emoji { get; internal set; }

            ///<summary>
            ///a developer-defined identifier for the button
            ///</summary>
            [JsonProperty("custom_id")]
            public string CustomID { get; internal set; }

            ///<summary>
            ///a url for link-style buttons
            ///</summary>
            [JsonProperty("url")]
            public string Url { get; internal set; }

            ///<summary>
            ///whether the button is disabled
            ///</summary>
            [JsonProperty("disabled")]
            public bool IsDisabled { get; internal set; }

            public enum ComponentType
            {
                ActionRow = 1,
                Button = 2
            }

            public enum ButtonStyles
            {
                Primary = 1,
                Secondary = 2,
                Success = 3,
                Danger = 4,
                Link = 5
            }
        }

        public class MessageActivity
        {
            ///<summary>
            ///type of message activity
            ///</summary>
            [JsonProperty("type")]
            public ActivityType Type { get; internal set; }

            ///<summary>
            ///party_id from a Rich Presence event
            ///</summary>
            [JsonProperty("party_id")]
            public string PartyID { get; internal set; }

            public enum ActivityType
            {
                JOIN = 1,
                SPECTATE = 2,
                LISTEN = 3,
                JOIN_REQUEST = 4
            }
        }

        public class MessageReference
        {
            ///<summary>
            ///id of the originating message
            ///</summary>
            [JsonProperty("message_id")]
            public ulong MessageID { get; internal set; }

            ///<summary>
            ///id of the originating message's channel
            ///</summary>
            [JsonProperty("channel_id")]
            public ulong ChannelID { get; internal set; }

            ///<summary>
            ///id of the originating message's guild
            ///</summary>
            [JsonProperty("guild_id")]
            public ulong GuildID { get; internal set; }

            ///<summary>
            ///when sending
            ///</summary>
            [JsonProperty("fail_if_not_exists")]
            public bool Failifnotexists { get; internal set; }
        }

        public class MessageReaction
        {
            ///<summary>
            ///times this emoji has been used to react
            ///</summary>
            [JsonProperty("count")]
            public int Count { get; internal set; }

            ///<summary>
            ///whether the current user reacted using this emoji
            ///</summary>
            [JsonProperty("me")]
            public bool Me { get; internal set; }

            ///<summary>
            ///emoji information
            ///</summary>
            [JsonProperty("emoji")]
            public DiscordEmoji Emoji { get; internal set; }
        }

        public class MessageSticker
        {
            ///<summary>
            ///id of the sticker
            ///</summary>
            [JsonProperty("id")]
            public ulong Id { get; internal set; }

            ///<summary>
            ///id of the pack the sticker is from
            ///</summary>
            [JsonProperty("pack_id")]
            public ulong PackID{ get; internal set; }

            ///<summary>
            ///name of the sticker
            ///</summary>
            [JsonProperty("name")]
            public string Name { get; internal set; }

            ///<summary>
            ///description of the sticker
            ///</summary>
            [JsonProperty("description")]
            public string Description { get; internal set; }

            ///<summary>
            ///a comma-separated list of tags for the sticker
            ///</summary>
            [JsonProperty("tags")]
            public string Tags { get; internal set; }

            ///<summary>
            ///sticker asset hash
            ///</summary>
            [JsonProperty("asset")]
            public string Asset { get; internal set; }

            ///<summary>
            ///type of sticker format
            ///</summary>
            [JsonProperty("format_type")]
            public StickerType FormatType { get; internal set; }

            public enum StickerType
            {
                PNG = 1,
                APNG = 2,
                LOTTIE = 3
            }
        }
        
        public class DiscordAttachment
        {
            ///<summary>
            ///attachment id
            ///</summary>
            [JsonProperty("id")]
            public ulong Id { get; internal set; }

            ///<summary>
            ///name of file attached
            ///</summary>
            [JsonProperty("filename")]
            public string Filename { get; internal set; }

            ///<summary>
            ///the attachment's media type
            ///</summary>
            [JsonProperty("content_type")]
            public string ContentType { get; internal set; }

            ///<summary>
            ///size of file in bytes
            ///</summary>
            [JsonProperty("size")]
            public int Size { get; internal set; }

            ///<summary>
            ///source url of file
            ///</summary>
            [JsonProperty("url")]
            public string Url { get; internal set; }

            ///<summary>
            ///a proxied url of file
            ///</summary>
            [JsonProperty("proxy_url")]
            public string ProxyUrl { get; internal set; }

            ///<summary>
            ///height of file (if image)
            ///</summary>
            [JsonProperty("height")]
            public int? Height { get; internal set; }

            ///<summary>
            ///width of file (if image)
            ///</summary>
            [JsonProperty("width")]
            public int? Width { get; internal set; }
        }
    }
    public class DiscordMessageDelete
	{
        ///<summary>
        ///the id of the message
        ///</summary>
        [JsonProperty("id")]
        public ulong ID { get; internal set; }

        ///<summary>
        ///the id of the channel
        ///</summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }

        ///<summary>
        ///the id of the guild
        ///</summary>
        [JsonProperty("guild_id")]
        public ulong GuildID { get; internal set; }
    }
    public class DiscordMessageDeleteBulk
	{
        ///<summary>
        ///the ids of the messages
        ///</summary>
        [JsonProperty("ids")]
        public ulong[] IDs { get; internal set; }

        ///<summary>
        ///the id of the channel
        ///</summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }

        ///<summary>
        ///the id of the guild
        ///</summary>
        [JsonProperty("guild_id")]
        public ulong GuildID { get; internal set; }
    }
    public class MessageReactionAdd
	{
        ///<summary>
        ///the id of the user
        ///</summary>
        [JsonProperty("user_id")]
        public ulong UserID { get; internal set; }

        ///<summary>
        ///the id of the channel
        ///</summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }

        ///<summary>
        ///the id of the message
        ///</summary>
        [JsonProperty("message_id")]
        public ulong MessageID { get; internal set; }

        ///<summary>
        ///the id of the guild
        ///</summary>
        [JsonProperty("guild_id")]
        public ulong GuildID { get; internal set; }

        ///<summary>
        ///the member who reacted if this happened in a guild
        ///</summary>
        [JsonProperty("member")]
        public GuildMember Member { get; internal set; }

        ///<summary>
        ///the emoji used to react - example
        ///</summary>
        [JsonProperty("emoji")]
        public DiscordEmoji Emoji { get; internal set; }
    }
    public class MessageReactionRemove
	{
        ///<summary>
        ///the id of the user
        ///</summary>
        [JsonProperty("user_id")]
        public ulong UserID { get; internal set; }

        ///<summary>
        ///the id of the channel
        ///</summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }

        ///<summary>
        ///the id of the message
        ///</summary>
        [JsonProperty("message_id")]
        public ulong MessageID { get; internal set; }

        ///<summary>
        ///the id of the guild
        ///</summary>
        [JsonProperty("guild_id")]
        public ulong GuildID { get; internal set; }

        ///<summary>
        ///the emoji used to react - example
        ///</summary>
        [JsonProperty("emoji")]
        public DiscordEmoji Emoji { get; internal set; }
    }
    public class MessageReactionRemoveAll 
	{
        ///<summary>
        ///the id of the channel
        ///</summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }

        ///<summary>
        ///the id of the message
        ///</summary>
        [JsonProperty("message_id")]
        public ulong MessageID { get; internal set; }

        ///<summary>
        ///the id of the guild
        ///</summary>
        [JsonProperty("guild_id")]
        public ulong GuildID { get; internal set; }
    }
    public class MessageReactionRemoveEmoji
	{
        ///<summary>
        ///the id of the channel
        ///</summary>
        [JsonProperty("channel_id")]
        public ulong ChannelID { get; internal set; }

        ///<summary>
        ///the id of the guild
        ///</summary>
        [JsonProperty("guild_id")]
        public ulong GuildID { get; internal set; }

        ///<summary>
        ///the id of the message
        ///</summary>
        [JsonProperty("message_id")]
        public ulong MessageID { get; internal set; }

        ///<summary>
        ///the emoji that was removed
        ///</summary>
        [JsonProperty("emoji")]
        public DiscordEmoji Emoji { get; internal set; }
    }
}

